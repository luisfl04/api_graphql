# Esquema para manipulação das entidades 'User' e 'Order'. Visa usar todos os
# recursos do graphQL


"""
Objeto que representa a entidade 'User' da aplicação
"""
type User{
    id: ID!,
    fullName: String!
    email: String
    age: Int,
    phone: String!
    gender: GenderValues!
}

"""
Enum de valores usados pelo InputObeject 'GenderInput'
"""
enum GenderValues {
    MASCULINO
    FEMININO
    OUTRO
}

"""
Objeto usado para a criação de 'Users' na aplicação
"""
input UserCreateInput{
    first_name: String!
    last_name: String,
    email: String,
    age: Int!,
    phone: String!,
    gender: GenderValues!
}

"""
Queries implementadas para o objeto 'User'
"""
type Query{
    searchAllUsers: [User!]
    searchUserById(id: ID!): User
}

"""
Mutations implementadas para o objeto 'User'
"""
type Mutation {
    createUser(newUser: UserCreateInput!): User
    updateEmailUser(id: ID!, email: String!): User
    deleteUser(id: ID!): String
}

# Interfaces implementadas:

# Unions implementadas:



